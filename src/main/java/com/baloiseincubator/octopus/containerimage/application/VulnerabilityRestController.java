package com.baloiseincubator.octopus.containerimage.application;

import com.baloiseincubator.octopus.containerimage.domain.ContainerImage;
import com.baloiseincubator.octopus.containerimage.domain.ContainerImageService;
import com.baloiseincubator.octopus.containerimage.domain.Severity;
import io.kubernetes.client.openapi.ApiClient;
import io.kubernetes.client.openapi.ApiException;
import io.kubernetes.client.openapi.Configuration;
import io.kubernetes.client.openapi.apis.CoreV1Api;
import io.kubernetes.client.openapi.models.V1Pod;
import io.kubernetes.client.openapi.models.V1PodList;
import io.kubernetes.client.util.ClientBuilder;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

@RestController
@RequiredArgsConstructor
@RequestMapping(path = "api/vulnerabilities")
public class VulnerabilityRestController {

  private final ContainerImageService containerImageService;

  @GetMapping
  public Set<ImageVulnerabilityDto> getImageVulnerabilities() throws IOException, ApiException {
    ApiClient client = ClientBuilder.cluster().build();

    // set the global default api-client to the in-cluster one from above
    Configuration.setDefaultApiClient(client);

    // the CoreV1Api loads default api-client from global configuration.
    CoreV1Api api = new CoreV1Api();

    // invokes the CoreV1Api client
    V1PodList list =
      api.listPodForAllNamespaces(null, null, null, null, null, null, null, null, null);
    for (V1Pod item : list.getItems()) {
      System.out.println(item.getMetadata().getName());
    }
    Iterable<ContainerImage> containerImges = containerImageService.getAllContainerImges();
    Set<ContainerImage> allContainerImages = new HashSet<>();
    containerImges.forEach(allContainerImages::add);
    return allContainerImages
      .stream()
      .map(this::mapToDto)
      .map(this::enrichWithSomeVulnerabilities)
      .collect(Collectors.toSet());
  }

  private ImageDto mapToDto(ContainerImage containerImage) {
    return new ImageDto(containerImage.getOrganisation(), containerImage.getRepository(), containerImage.getRegistryUrl(), containerImage.getTag(), containerImage.getDigest());
  }

  // TODO: Get from DB as well
  private ImageVulnerabilityDto enrichWithSomeVulnerabilities(ImageDto imageDto) {
    return new ImageVulnerabilityDto(
      imageDto,
      new VulnerabilityInfoDto(Severity.HIGH, Arrays.asList(
        new VulnerabilityDto("https://www.linktomoredetails.com/thisexactone"),
        new VulnerabilityDto("https://www.linktomoredetails.com/otherone")
      ), Arrays.asList(
        new SeveritySummaryDto(Severity.HIGH, 3, 3),
        new SeveritySummaryDto(Severity.MEDIUM, 22, 18)
      ))
    );
  }

}
